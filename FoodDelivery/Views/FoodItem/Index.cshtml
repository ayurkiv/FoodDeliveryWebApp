@using FoodDelivery.Utilities
@model PaginatedList<FoodDelivery.ViewModel.FoodItemViewModel>
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@{
    ViewData["Title"] = "Products";
}

<div class="container d-flex align-items-center justify-content-center">
    <div class="bg-form-reister-container">
        <div class="d-flex align-content-center justify-content-between">
            <h1 class="topic-register mb-0">Products</h1>

            <div class="d-flex align-content-center">
                <a asp-action="Create" class="btn btn-lg btn-primary btn-register fs-5">Create New</a>
            </div>
        </div>


        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Available)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Price)
                    </th>
                    <th>
                        Date
                        <!--@Html.DisplayNameFor(model => model.Items.First().AddedDate)-->
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().CategoryName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Weight)
                    </th>
                    <th>
                        Time
                        <!--@Html.DisplayNameFor(model => model.Items.First().TimeToReady)-->
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Available)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.AddedDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CategoryName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Weight)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TimeToReady)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new {@class="btn"})
                            @Html.ActionLink("Details", "Details", new { id = item.Id }, new {@class="btn"})
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new {@class="btn"})
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <nav aria-label="Page navigation">
            <ul class="pagination pagination-sm justify-content-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item pagination-bg">
                        <a class="page-link pagination-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1, pageSize = Model.PageSize })" aria-label="Previous">
                            <span aria-hidden="true" class="pagination-link fw-medium fs-6">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item pagination-bg @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link pagination-link fs-6" href="@Url.Action("Index", new { page = i, pageSize = Model.PageSize })">@i</a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item pagination-bg">
                        <a class="page-link pagination-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1, pageSize = Model.PageSize })" aria-label="Next">
                            <span aria-hidden="true" class="pagination-link fw-medium fs-6">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>
